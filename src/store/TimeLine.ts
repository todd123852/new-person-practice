import { reactive } from "vue";
import icons from '@/store/logoBus'
const learningTimeline = reactive([
    {
      week: 1,
      logo: icons.HTML5,
      title: '第一周',
      summary: '学习HTML(好TM懒)是什么? 由两个反方向箭头符号组成的文件，简单的标签格式如 <b>粗</b> <u>下划</u> <del>删</del> <i>倾斜</i> 欸...',
      fullContent: '学习HTML(好TM懒)是什么? 由两个反方向箭头符号组成的文件，简单的标签格式如 <b>粗</b> <u>下划</u> <del>删</del> <i>倾斜</i> 欸。HTML 的全称是 HyperText Markup Language（超文本标记语言），是构成网页的基础。它使用一系列标签来描述网页的结构和内容。',
      readMore: false,
    },
    {
      week: 2,
      logo: icons.CSS,
      title: '第二周',
      summary: '学习注册表单常用元素和默认规则，form的重置与注册，label(垒包)可以触发点击，input的(收音机radio)只能多个选一个；学习table(表格)行colspan/列rowspan合并，列表ol & ul(偏爱Ol)...',
      fullContent: '学习注册表单常用元素和默认规则，form 的 `reset` 按钮用于重置表单元素到初始值。`label` 元素可以关联表单元素，点击 `label` 会触发关联元素的焦点或点击事件。`input` 类型为 `radio` 的一组按钮只能选择一个。学习 `table` 元素的 `colspan` 和 `rowspan` 属性用于合并单元格。`ol` 是有序列表，`ul` 是无序列表。',
      readMore: false,
    },
    {
      week: 3,
      logo: icons.JS,
      title: '第三周',
      summary: '初识CSS: 颜色，字体，长宽，定位，伪类，权重；每个元素都是个小盒子margin > border > padding > 内馅；样式优先级: 内联 > id > .类 === [属性] === :伪类 > 元素 > *通用 === +兄弟 === ~后续的兄弟；完全相等看谁在最底部...',
      fullContent: '初识 CSS (Cascading Style Sheets)：学习了颜色属性（如 `color`，`background-color`），字体属性（如 `font-size`，`font-family`），元素的 `width` 和 `height`，定位属性（如 `position: relative/absolute/fixed`），伪类（如 `:hover`，`:active`），以及 CSS 的选择器权重规则。理解了盒模型（margin > border > padding > content）。样式优先级遵循内联样式 > ID 选择器 > 类选择器 === 属性选择器 === 伪类 > 元素选择器 > 通用选择器 === 相邻兄弟选择器 === 后续兄弟选择器，当优先级相同时，后出现的样式会覆盖前面的。',
      readMore: false,
    },
    {
      week: 45,
      logo: icons.JS,
      title: '第四~五周',
      summary: '初识JavaScript: 原生操作DOM元素；注册/卸载事件:点击，输入，鼠标，焦点，悬停，滚动，钩子(load，DOMContentLoaded)；事件委托，修改样式，添加/移除类名，创建元素...',
      fullContent: '初识 JavaScript：学习了如何使用原生 JavaScript 操作 DOM (Document Object Model) 元素，例如获取元素、修改文本内容、属性等。学习了如何注册和卸载各种事件监听器，包括 `click`，`input`，`mouseover`，`focus`，`hover`，`scroll`，以及页面加载相关的钩子函数 `load` 和 `DOMContentLoaded`。掌握了事件委托的技巧，以及如何使用 JavaScript 修改元素的样式、添加和移除 CSS 类名，以及动态创建新的 HTML 元素。',
      readMore: false,
    },
    {
      week: 6,
      logo: icons.Bootstrap,
      title: '第六周',
      summary: '学习JavaScript基本操作；setTimeout时间计时器，setInterval每秒换图，正则表达式，innerHTML/innerText替换文本，事件冒泡/捕获，箭头函数，剩余参数arguments，...展开运算...',
      fullContent: '学习了 JavaScript 的基本操作，包括 `setTimeout` 用于延迟执行函数，`setInterval` 用于定时重复执行函数，正则表达式用于进行文本匹配和替换，`innerHTML` 和 `innerText` 用于操作元素的文本内容（前者可以包含 HTML），理解了事件冒泡和事件捕获的机制，学习了箭头函数的简洁语法，`arguments` 对象用于访问函数的所有参数，以及 `...` 展开运算符的用法。另外额外学习Bootstrap基本应用',
      readMore: false,
    },
    {
      week: 7,
      logo: icons.Lodash,
      title: '第七周',
      summary: '学习Array/Object的原生prototype；split(分割)，reverse(翻转)，join(转字符串)，every&some，filter，find/findIndex，splice(删除/插入)，slice(提取/浅拷贝)，sort(排序)，replace(查找替换)，map(遍历)，Array.from(转真数组)，reduce(整合遍历)，flat(扁平化)...',
      fullContent: '学习了 JavaScript 中 `Array` 和 `Object` 原型对象上的一些常用方法，例如 `split` 用于分割字符串成数组，`reverse` 用于翻转数组，`join` 用于将数组转换为字符串，`every` 和 `some` 用于数组的条件判断，`filter` 用于过滤数组元素，`find` 和 `findIndex` 用于查找数组元素，`splice` 用于删除或插入数组元素，`slice` 用于提取数组的浅拷贝，`sort` 用于排序数组，`replace` 用于替换字符串中的内容，`map` 用于遍历数组并返回新数组，`Array.from` 用于将类数组对象转换为真数组，`reduce` 用于整合遍历数组，`flat` 用于扁平化多维数组。对于 `Object`，学习了 `Object.keys`（获取键数组），`Object.values`（获取值数组），`Object.assign`（浅拷贝对象）。Lodash套件的基本用法',
      readMore: false,
    },
    {
      week: 8,
      logo: icons.func,
      title: '第八周',
      fullContent: '学习了 `Function` 原型对象上的 `call`，`apply` 和 `bind` 方法，它们用于修改函数执行时的 `this` 指向。学习了 `class` 关键字用于创建构造函数和类。掌握了高阶函数 `debounce`（防抖）和 `throttle`（节流）的实现原理和应用场景，`deepCopy`（深拷贝）用于创建对象的深层副本，`try...catch...finally` 用于错误处理，以及递归函数的概念和使用。',
      readMore: false,
    },
    {
      week: 9,
      logo: icons.JS,
      title: '第九周',
      fullContent: '学习了 AJAX (Asynchronous JavaScript and XML) 用于进行异步请求。了解了旧版的 `XMLHttpRequest` (XHR) 对象的使用方法，包括 `open` 设置请求方式和地址，监听 `loadend` 事件获取回调结果，以及 `send` 执行请求。学习了现代化的请求方法 `Fetch` API 和第三方库 `Axios`。理解了 `Promise` 的概念，它用于处理异步操作的结果，具有三种状态：Pending（待定），Fulfilled（已实现），Rejected（已拒绝），并通过 `resolve` 和 `reject` 改变状态，使用 `then` 和 `catch` 处理结果。',
      readMore: false,
    },
    {
      week: 10,
      logo: icons.Git,
      title: '第十周',
      fullContent: '学习了 Git 的基本操作，包括版本控制、提交、分支管理等。学习了如何在 GitHub 上建立个人网站和代码仓库。了解了 Webpack 这个模块打包工具的基本概念和使用，用于打包前端资源。',
      readMore: false,
    },
    {
      week: 1114,
      logo: icons.Vue,
      title: '第11~14周',
      fullContent: '学习了 Vue.js 这个前端框架，主要学习了 Vue 3 的语法和特性，同时也学习了部分 Vue 2 的内容。掌握了 `ref` 用于创建响应式引用，`watch` 用于监控数据变化，Vue 组件的生命周期钩子函数，使用 Pinia 进行状态管理，Vue Router 实现页面路由，以及组件之间多种通信方式，包括 `props`，`emit`，`v-model`，`$attrs`，`slot` 等。学习了使用 `Transition` 组件实现动画效果。',
      readMore: false,
    },
    {
      week: 1520,
      logo: icons.TS,
      title: '第15~20周',
      fullContent: '花费了五周时间制作了一个个人的 Vue.js 项目，用于实践之前学习的 Vue 框架知识，包括组件设计、状态管理、路由配置、API 调用等。',
      readMore: false,
    },
    {
      week: 2023,
      logo: icons.google,
      title: '第20~23周',
      fullContent: '为部门内部制作 Google App Script 的前端界面，主要需求是帮助业务部门排查异常会员，能够通过前端提交表单数据到指定的 Google Sheets 试算表中，并且记录用户对话的统计信息。',
      readMore: false,
    },
    {
      week: 2425,
      logo: icons.React,
      title: '第24~25周',
      fullContent: '开始学习 React 框架，掌握了基本的 `useState` Hook 用于实现组件的响应式状态管理，`useEffect` Hook 用于处理副作用，例如监听特定数值的变化并在变化时执行相应的操作（常用于获取 API 数据等）。学习了 React 组件之间基本的通信方式，例如 Props 传递。',
      readMore: false,
    },
    {
      week: 26,
      logo: icons.React,
      title: '第26周',
      fullContent: '制作了一个简单的 React 天气预报项目，用于巩固之前学习的 React 基础知识，包括组件创建、状态管理、API 调用和数据展示等。',
      readMore: false,
    },
  ]);
  
  export default learningTimeline;